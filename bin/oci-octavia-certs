#!/bin/sh

# This script has been written thanks to the doc here:
# https://docs.openstack.org/octavia/latest/admin/guides/certificates.html
# Author: Thomas Goirand <zigo@debian.org>

set -e
set -x

GENCERT_PATH=/root/certs-octavia
CA_HOSTNAME=$(hostname --fqdn)
OCTAVIA_CA_PASSWORD=octavia

CWD=$(pwd)

mkdir -p ${GENCERT_PATH}
cd ${GENCERT_PATH}

# 1. Create a working directory for the certificate authorities. Make sure to set the proper permissions on this directory such that others cannot access the private keys, random bits, etc. being generated here.
mkdir -p certs
chmod 700 certs
cd certs

# 2. Create the OpenSSL configuration file. This can be shared between the two certificate authorities.
echo "# OpenSSL root CA configuration file.

[ ca ]
default_ca = CA_default

[ CA_default ]
dir               = ./
certs             = \$dir/certs
crl_dir           = \$dir/crl
new_certs_dir     = \$dir/newcerts
database          = \$dir/index.txt
serial            = \$dir/serial
RANDFILE          = \$dir/private/.rand

# The root key and root certificate.
private_key       = \$dir/private/ca.key.pem
certificate       = \$dir/certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = \$dir/crlnumber
crl               = \$dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 3650
preserve          = no
policy            = policy_strict

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of man ca.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
# Options for the 'req' tool ('man req').
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
emailAddress                    = Email Address

# Optionally, specify some defaults.
countryName_default             = CH
stateOrProvinceName_default     = Geneva
localityName_default            = Carouge
0.organizationName_default      = Debian
organizationalUnitName_default  = Octavia
emailAddress_default            = debian-devel@lists.debian.org
commonName_default              = example.org

[ v3_ca ]
# Extensions for a typical CA ('man x509v3_config').
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
# Extensions for client certificates ('man x509v3_config').
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = \"OpenSSL Generated Client Certificate\"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
# Extensions for server certificates ('man x509v3_config').
basicConstraints = CA:FALSE
nsCertType = server
nsComment = \"OpenSSL Generated Server Certificate\"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
# Extension for CRLs ('man x509v3_config').
authorityKeyIdentifier=keyid:always" > ${GENCERT_PATH}/certs/openssl.cnf

# 3. Customize the above file

# 4. Make directories for the two certificate authorities.
mkdir -p client_ca
mkdir -p server_ca

# 5. Starting with the server certificate authority, prepare the CA.
cd server_ca
mkdir certs crl newcerts private
chmod 700 private
touch index.txt
echo 1000 > serial

# 6. Create the server CA key.
openssl genrsa -passout pass:${OCTAVIA_CA_PASSWORD} -aes256 -out private/ca.key.pem 4096
chmod 400 private/ca.key.pem

# 7. Create the server CA certificate.
openssl req -config ../openssl.cnf -passin pass:${OCTAVIA_CA_PASSWORD} -key private/ca.key.pem -new -x509 -days 7300 -sha256 -extensions v3_ca -out certs/ca.cert.pem \
	-subj "/C=CH/ST=Geneva/L=Carouge/O=OCI/OU=Production/CN=${CA_HOSTNAME}/emailAddress=production@infomaniak.com/subjectAltName=${CA_HOSTNAME}"

# 8. Moving to the client certificate authority, prepare the CA.
cd ../client_ca
mkdir certs crl csr newcerts private
chmod 700 private
touch index.txt
echo 1000 > serial

# 9. Create the client CA key.
openssl genrsa -aes256 -passout pass:${OCTAVIA_CA_PASSWORD} -out private/ca.key.pem 4096
chmod 400 private/ca.key.pem

# 10. Create the client CA certificate. 
openssl req -config ../openssl.cnf -passin pass:${OCTAVIA_CA_PASSWORD} -key private/ca.key.pem -new -x509 -days 7300 -sha256 -extensions v3_ca -out certs/ca.cert.pem \
	-subj "/C=CH/ST=Geneva/L=Carouge/O=OCI/OU=Production/CN=${CA_HOSTNAME}/emailAddress=production@infomaniak.com/subjectAltName=${CA_HOSTNAME}"

# 11. Create a key for the client certificate to use.
openssl genrsa -aes256 -passout pass:${OCTAVIA_CA_PASSWORD} -out private/client.key.pem 2048

# 12. Create the certificate request for the client certificate used on the controllers.
openssl req -config ../openssl.cnf -passin pass:${OCTAVIA_CA_PASSWORD} -new -sha256 -key private/client.key.pem -out csr/client.csr.pem \
	-subj "/C=CH/ST=Geneva/L=Carouge/O=OCI/OU=Production/CN=${CA_HOSTNAME}/emailAddress=production@infomaniak.com/subjectAltName=${CA_HOSTNAME}"

# 13. Sign the client certificate request.
openssl ca -batch -config ../openssl.cnf -passin pass:${OCTAVIA_CA_PASSWORD} -extensions usr_cert -days 7300 -notext -md sha256 -in csr/client.csr.pem -out certs/client.cert.pem

# 14. Create a concatenated client certificate and key file.
openssl rsa -passin pass:${OCTAVIA_CA_PASSWORD} -in private/client.key.pem -out private/client.cert-and-key.pem
cat certs/client.cert.pem >> private/client.cert-and-key.pem

cd ..

# Now we copy these new certs into Octavia's config
mkdir -p /etc/octavia/certs
chmod 700 /etc/octavia/certs
cp server_ca/private/ca.key.pem /etc/octavia/certs/server_ca.key.pem
chmod 700 /etc/octavia/certs/server_ca.key.pem
cp server_ca/certs/ca.cert.pem /etc/octavia/certs/server_ca.cert.pem
cp client_ca/certs/ca.cert.pem /etc/octavia/certs/client_ca.cert.pem
cp client_ca/private/client.cert-and-key.pem /etc/octavia/certs/client.cert-and-key.pem
chmod 700 /etc/octavia/certs/client.cert-and-key.pem
chown -R octavia.octavia /etc/octavia/certs

# Restart the daemons
for i in worker health-manager housekeeping ; do
	echo "Restarting octavia-$i"
	systemctl restart octavia-${i}.service
done

cd ${CWD}
